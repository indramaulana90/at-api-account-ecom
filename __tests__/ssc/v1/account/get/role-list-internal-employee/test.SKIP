/**
* Author      : Immanuel Yohansen (immanuel.yohansen@sinbad.co.id)
* Modifier    :
* Domain      : account
* Description : This Main File for Testing on API get_role-list-internal-employee
*/

import getDataFromPool from '@at-api-core/get-data-from-pool';
import * as er from '@at-api-core/expect-response';
import endpoint from './endpoint';
import * as data from './data';
import tc from './tc';
import schema from './schema.json';
import rs from '../../../../../../helper/responseStatusLibrary.json';
import selectById from '../../../../../../data/model/v1/account/roles';

const { cookies } = getDataFromPool('ng','seller-center', 'TRS_admin.trs@sinbad.co.id');
const platform = 'seller-center';

describe(`${tc.type[1]} ${tc.describe}`, () => {
  test(`${tc.positive.default}`, async () => {
    let objectId;
    const arrName = ['Super Admin', 'Supplier Read Only', 'Content Manager', 'Operational Manager', 'Field Sales Manager', 'Financial Manager', 'Marketing Manager'];
    resp = await endpoint(cookies, platform);
    er.expectStatus(resp, rs.statusOk);
    er.expectSchema(resp, schema);
    // eslint-disable-next-line no-plusplus
    for (let i = 0; i < arrName.length; i++) {
      objectId = resp.body.data[i].id;
      const objectFiltered = resp.body.data[i];
      // eslint-disable-next-line no-await-in-loop
      const arrDB = await selectById(objectId);
      const objectDB = (arrDB)[0];
      er.expectEqualDB(resp, objectFiltered, objectDB, data.compareDB);
    }
  });
});

describe(`${tc.type[0]} ${tc.describe}`, () => {
  data.LoopingErrorPlatform.forEach(async (element) => {
    test(`${element.title}`, async () => {
      const platformNegative = element.value;

      resp = await endpoint(cookies, platformNegative);
      er.expectStatus(resp, rs.statusUnauthorized);
      er.expectUnauthorized(resp);
    });
  });
});

describe(`${tc.type[0]} ${tc.describe}`, () => {
  data.loopingErrorCookies.forEach(async (element) => {
    test(`${element.title}`, async () => {
      const cookiesNegative = element.value;

      resp = await endpoint(cookiesNegative, platform);
      er.expectStatus(resp, rs.statusUnauthorized);
      er.expectUnauthorized(resp);
    });
  });
});
