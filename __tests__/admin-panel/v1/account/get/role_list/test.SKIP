/**
* Author      : Farhad (farhad@sinbad.co.id)
* Modifier    :
* Domain      : account
* Description : This Main File for Testing on API get_role_list
*/

import getDataFromPool from '@at-api-core/get-data-from-pool';
import * as er from '@at-api-core/expect-response';
import endpoint from './endpoint';
import * as data from './data';
import tc from './tc';
import schema from './schema.json';
import schemaError from '../../../../../../helper/schema/schema_error_default.json';
import rs from '../../../../../../helper/responseStatusLibrary.json';
import { selectById as selectRoles } from '../../../../../../data/model/v1/account/roles';

// const { cookies } = getDataFromPool('ng','admin-panel', 'adminPanel_admin.panel@sinbad.co.id');

describe(`${tc.type[1]} ${tc.describe}`, () => {
  test(`${tc.positive.default}`, async () => {

    const queryParams = data.params();

    resp = await endpoint(cookies, queryParams);
    er.expectStatus(resp, rs.statusOk);
    er.expectSchema(resp, schema);
    er.expectEqual(resp, resp.body.meta.page, queryParams.page);
    er.expectEqual(resp, resp.body.meta.perPage, queryParams.perPage);

    const objectFiltered = resp.body.data[0];
    const arrDB = await selectRoles(objectFiltered.id);
    const objectDB = (arrDB)[0];
    er.expectEqualDB(resp, objectFiltered, objectDB, data.compareDB);
  });
  test(`${tc.positive.customPage}`, async () => {
    const queryParams = data.paramsPage();

    resp = await endpoint(cookies, queryParams);
    er.expectStatus(resp, rs.statusOk);
    er.expectSchema(resp, schema);
    er.expectEqual(resp, resp.body.meta.page, queryParams.page);

    const objectFiltered = resp.body.data[0];
    const arrDB = await selectRoles(objectFiltered.id);
    const objectDB = (arrDB)[0];
    er.expectEqualDB(resp, objectFiltered, objectDB, data.compareDB);
  });
  test(`${tc.positive.customPerPage}`, async () => {
    const queryParams = data.paramsPerPage();

    resp = await endpoint(cookies, queryParams);
    er.expectStatus(resp, rs.statusOk);
    er.expectSchema(resp, schema);
    er.expectEqual(resp, resp.body.meta.perPage, queryParams.perPage);

    const objectFiltered = resp.body.data[0];
    const arrDB = await selectRoles(objectFiltered.id);
    const objectDB = (arrDB)[0];
    er.expectEqualDB(resp, objectFiltered, objectDB, data.compareDB);
  });
  test(`${tc.positive.customKeyword}`, async () => {
    const queryParams = data.paramsKeyword();

    resp = await endpoint(cookies, queryParams);
    er.expectStatus(resp, rs.statusOk);
    er.expectSchema(resp, schema);

    const objectFiltered = resp.body.data[0];
    const arrDB = await selectRoles(objectFiltered.id);
    const objectDB = (arrDB)[0];
    er.expectEqualDB(resp, objectFiltered, objectDB, data.compareDB);
  });
  test(`${tc.positive.sortKeyCreatedAt}`, async () => {
    const queryParams = data.paramsSortKey();

    resp = await endpoint(cookies, queryParams);
    er.expectStatus(resp, rs.statusOk);
    er.expectSchema(resp, schema);

    const objectFiltered = resp.body.data[0];
    const arrDB = await selectRoles(objectFiltered.id);
    const objectDB = (arrDB)[0];
    er.expectEqualDB(resp, objectFiltered, objectDB, data.compareDB);
  });
  test(`${tc.positive.sortKeyUpdatedAt}`, async () => {
    const queryParams = data.paramsSortKey();
    queryParams.sortKey = 'updatedAt';

    resp = await endpoint(cookies, queryParams);
    er.expectStatus(resp, rs.statusOk);
    er.expectSchema(resp, schema);

    const objectFiltered = resp.body.data[0];
    const arrDB = await selectRoles(objectFiltered.id);
    const objectDB = (arrDB)[0];
    er.expectEqualDB(resp, objectFiltered, objectDB, data.compareDB);
  });
  test(`${tc.positive.sortTypeAsc}`, async () => {
    const queryParams = data.paramsSortType();
    queryParams.sortType = 'asc';

    resp = await endpoint(cookies, queryParams);
    er.expectStatus(resp, rs.statusOk);
    er.expectSchema(resp, schema);

    const objectFiltered = resp.body.data[0];
    const arrDB = await selectRoles(objectFiltered.id);
    const objectDB = (arrDB)[0];
    er.expectEqualDB(resp, objectFiltered, objectDB, data.compareDB);
  });
  test(`${tc.positive.sortTypeDesc}`, async () => {
    const queryParams = data.paramsSortType();

    resp = await endpoint(cookies, queryParams);
    er.expectStatus(resp, rs.statusOk);
    er.expectSchema(resp, schema);

    const objectFiltered = resp.body.data[0];
    const arrDB = await selectRoles(objectFiltered.id);
    const objectDB = (arrDB)[0];
    er.expectEqualDB(resp, objectFiltered, objectDB, data.compareDB);
  });
});

describe(`${tc.type[0]} ${tc.describe}`, () => {
  test(`${tc.negative.pageInvalid}`, async () => {
    const queryParams = data.params();
    queryParams.page = 'x';

    resp = await endpoint(cookies, queryParams);
    er.expectStatus(resp, rs.statusUnprocessableEntity);
    er.expectSchema(resp, schemaError);
    er.expectSnapshot(resp);
  });
  test(`${tc.negative.perPageInvalid}`, async () => {
    const queryParams = data.params();
    queryParams.perPage = 'x';

    resp = await endpoint(cookies, queryParams);
    er.expectStatus(resp, rs.statusUnprocessableEntity);
    er.expectSchema(resp, schemaError);
    er.expectSnapshot(resp);
  });
  test(`${tc.negative.keywordLessThan3}`, async () => {
    const queryParams = data.params();
    queryParams.keyword = 'xy';

    resp = await endpoint(cookies, queryParams);
    er.expectStatus(resp, rs.statusUnprocessableEntity);
    er.expectSchema(resp, schemaError);
    er.expectSnapshot(resp);
  });
  test(`${tc.negative.keywordEmptyString}`, async () => {
    const queryParams = data.params();
    queryParams.keyword = '';

    resp = await endpoint(cookies, queryParams);
    er.expectStatus(resp, rs.statusUnprocessableEntity);
    er.expectSchema(resp, schemaError);
    er.expectSnapshot(resp);
  });
  test(`${tc.negative.sortKeyInvalid}`, async () => {
    const queryParams = data.params();
    queryParams.sortKey = 'ascending';

    resp = await endpoint(cookies, queryParams);
    er.expectStatus(resp, rs.statusUnprocessableEntity);
    er.expectSchema(resp, schemaError);
    er.expectSnapshot(resp);
  });
  test(`${tc.negative.sortKeyEmptyString}`, async () => {
    const queryParams = data.params();
    queryParams.sortKey = '';

    resp = await endpoint(cookies, queryParams);
    er.expectStatus(resp, rs.statusUnprocessableEntity);
    er.expectSchema(resp, schemaError);
    er.expectSnapshot(resp);
  });
  test(`${tc.negative.sortTypeInvalid}`, async () => {
    const queryParams = data.params();
    queryParams.sortType = 'name';

    resp = await endpoint(cookies, queryParams);
    er.expectStatus(resp, rs.statusUnprocessableEntity);
    er.expectSchema(resp, schemaError);
    er.expectSnapshot(resp);
  });
  test(`${tc.negative.sortTypeEmptyString}`, async () => {
    const queryParams = data.params();
    queryParams.sortType = '';

    resp = await endpoint(cookies, queryParams);
    er.expectStatus(resp, rs.statusUnprocessableEntity);
    er.expectSchema(resp, schemaError);
    er.expectSnapshot(resp);
  });
  test(`${tc.negative.someParamsError}`, async () => {
    const queryParams = data.params();
    queryParams.page = 'x';
    queryParams.keyword = '12';
    queryParams.sortType = '';

    resp = await endpoint(cookies, queryParams);
    er.expectStatus(resp, rs.statusUnprocessableEntity);
    er.expectSchema(resp, schemaError);
    er.expectSnapshot(resp);
  });
  test(`${tc.negative.allParamsError}`, async () => {
    const queryParams = data.params();
    queryParams.page = 'x';
    queryParams.perPage = 'y';
    queryParams.keyword = '12';
    queryParams.sortType = 'y';
    queryParams.sortKey = 'x';

    resp = await endpoint(cookies, queryParams);
    er.expectStatus(resp, rs.statusUnprocessableEntity);
    er.expectSchema(resp, schemaError);
    er.expectSnapshot(resp);
  });
});

describe(`${tc.type[0]} ${tc.describe}`, () => {
  test(`${tc.negative.xPlatformInvalid}`, async () => {
    const queryParams = data.params();

    resp = await endpoint(cookies, queryParams).set('x-platform', 'error');
    er.expectStatus(resp, rs.statusUnauthorized);
    er.expectUnauthorized(resp);
  });

  test(`${tc.negative.xPlatformNotSet}`, async () => {
    const queryParams = data.params();

    resp = await endpoint(cookies, queryParams).unset('x-platform');
    er.expectStatus(resp, rs.statusUnauthorized);
    er.expectUnauthorized(resp);
  });

  data.loopingErrorCookies.forEach(async (element) => {
    test(`${element.title}`, async () => {
      const cookiesNegative = element.value;
      const queryParams = data.params();

      resp = await endpoint(cookiesNegative, queryParams);
      er.expectStatus(resp, rs.statusUnauthorized);
      er.expectUnauthorized(resp);
    });
  });
});
