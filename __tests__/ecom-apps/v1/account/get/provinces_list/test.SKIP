/**
* Author      : Fulki Firosyan (fulki.firosyan@sinbad.co.id)
* Modifier    :
* Domain      : account
* Description : This Main File for Testing on API get_provinces_list
*/

import getDataFromPool from '@at-api-core/get-data-from-pool';
import * as er from '@at-api-core/expect-response';
import loopingSetRequest from '@at-api-core/looping-set-request';
import endpoint from './endpoint';
import * as data from './data';
import tc from './tc';
import schema from './schema.json';
import schemaError from '../../../../../../../helper/schema/schema_error_default.json';
import rs from '../../../../../../helper/responseStatusLibrary.json';
import { selectById as sdSelectProvinces } from '../../../../../data/model/v1/account/provinces';

const { cookies } = getDataFromPool('sinbad-app', 'Chimera-SR_081231111111');

describe(`${tc.type[1]} ${tc.describe}`, () => {
  test(`${tc.positive.limit10Skip0}`, async () => {
    const queryParam = data.paramDefault();

    resp = await endpoint(cookies, queryParam);
    er.expectStatus(resp, rs.statusOk);
    er.expectSchema(resp, schema);

    er.expectEqual(resp, resp.body.meta.limit, queryParam.limit);
    er.expectEqual(resp, resp.body.meta.skip, queryParam.skip);

    const objectFiltered = resp.body.data[0];
    const arrDB = await sdSelectProvinces(objectFiltered.id);
    const objectDB = (arrDB)[0];
    er.expectEqualDB(resp, objectFiltered, objectDB, data.compareDB);
  });

  test(`${tc.positive.limit5Skip1}`, async () => {
    const queryParam = data.paramDefault();
    queryParam.limit = 5;
    queryParam.skip = 1;

    resp = await endpoint(cookies, queryParam);
    er.expectStatus(resp, rs.statusOk);
    er.expectSchema(resp, schema);

    er.expectEqual(resp, resp.body.meta.limit, queryParam.limit);
    er.expectEqual(resp, resp.body.meta.skip, queryParam.skip);

    const objectFiltered = resp.body.data[0];
    const arrDB = await sdSelectProvinces(objectFiltered.id);
    const objectDB = (arrDB)[0];
    er.expectEqualDB(resp, objectFiltered, objectDB, data.compareDB);
  });

  test(`${tc.positive.ascId}`, async () => {
    const queryParam = data.paramDefault();
    queryParam.sort = 'asc';
    queryParam.sortby = 'id';

    resp = await endpoint(cookies, queryParam);
    er.expectStatus(resp, rs.statusOk);
    er.expectSchema(resp, schema);

    const arrayData = resp.body.data;
    const arrayOfCode = arrayData.map((temp) => temp[queryParam.sortby]);
    er.expectAscending(resp, arrayOfCode);

    er.expectEqual(resp, resp.body.meta.limit, queryParam.limit);
    er.expectEqual(resp, resp.body.meta.skip, queryParam.skip);

    const objectFiltered = resp.body.data[0];
    const arrDB = await sdSelectProvinces(objectFiltered.id);
    const objectDB = (arrDB)[0];
    er.expectEqualDB(resp, objectFiltered, objectDB, data.compareDB);
  });

  test(`${tc.positive.descName}`, async () => {
    const queryParam = data.paramDefault();
    queryParam.sort = 'desc';
    queryParam.sortby = 'name';

    resp = await endpoint(cookies, queryParam);
    er.expectStatus(resp, rs.statusOk);
    er.expectSchema(resp, schema);

    const arrayData = resp.body.data;
    const arrayOfCode = arrayData.map((temp) => temp[queryParam.sortby]);
    er.expectDescending(resp, arrayOfCode);

    er.expectEqual(resp, resp.body.meta.limit, queryParam.limit);
    er.expectEqual(resp, resp.body.meta.skip, queryParam.skip);

    const objectFiltered = resp.body.data[0];
    const arrDB = await sdSelectProvinces(objectFiltered.id);
    const objectDB = (arrDB)[0];
    er.expectEqualDB(resp, objectFiltered, objectDB, data.compareDB);
  });

  test(`${tc.positive.keyword}`, async () => {
    const queryParam = data.paramDefault();
    queryParam.keyword = 'JAWA';

    resp = await endpoint(cookies, queryParam);
    er.expectStatus(resp, rs.statusOk);
    er.expectSchema(resp, schema);

    const arrayData = resp.body.data;
    arrayData.map((temp) => er.expectContain(resp, temp.name, queryParam.keyword));

    er.expectEqual(resp, resp.body.meta.limit, queryParam.limit);
    er.expectEqual(resp, resp.body.meta.skip, queryParam.skip);

    const objectFiltered = resp.body.data[0];
    const arrDB = await sdSelectProvinces(objectFiltered.id);
    const objectDB = (arrDB)[0];
    er.expectEqualDB(resp, objectFiltered, objectDB, data.compareDB);
  });
});

describe(`${tc.type[0]} ${tc.describe}`, () => {
  test(`${tc.negative.keywordNotFound}`, async () => {
    const queryParam = data.paramDefault();
    queryParam.keyword = 'error';

    resp = await endpoint(cookies, queryParam);
    er.expectStatus(resp, rs.statusOk);
    er.expectSchema(resp, schema);

    const arrayData = resp.body.data;
    arrayData.map((temp) => er.expectContain(resp, temp.name, queryParam.keyword));

    er.expectEqual(resp, resp.body.meta.limit, queryParam.limit);
    er.expectEqual(resp, resp.body.meta.skip, queryParam.skip);
    er.expectSnapshot(resp);
  });

  data.loopingError.forEach(async (element) => {
    test(`${element.title}`, async () => {
      let queryParam = data.paramDefault();
      queryParam = loopingSetRequest(queryParam, element);

      resp = await endpoint(cookies, queryParam);
      er.expectStatus(resp, rs.statusBadRequest);
      er.expectSchema(resp, schemaError);
      er.expectSnapshot(resp);
    });
  });

  data.notSetError.forEach(async (element) => {
    test(`${element.title}`, async () => {
      const queryParam = data.paramDefault();
      Reflect.deleteProperty(queryParam, element.value);

      resp = await endpoint(cookies, queryParam);
      er.expectStatus(resp, rs.statusBadRequest);
      er.expectSchema(resp, schemaError);
      er.expectSnapshot(resp);
    });
  });

  data.loopingErrorCookies.forEach(async (element) => {
    test(`${element.title}`, async () => {
      const queryParam = data.paramDefault();
      const cookiesNegative = element.value;

      resp = await endpoint(cookiesNegative, queryParam);
      er.expectStatus(resp, rs.statusUnauthorized);
      er.expectUnauthorized(resp);
    });
  });
});
