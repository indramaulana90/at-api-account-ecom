/**
* Author      : Evinna Ginola Utama (evinna.ginola@sinbad.co.id)
* Modifier    :
* Domain      : account
* Description : This Main File for Testing on API get_suppliers
*/

import getDataFromPool from '@at-api-core/get-data-from-pool';
import * as er from '@at-api-core/expect-response';
import endpoint from './endpoint';
import * as data from './data';
import tc from './tc.SKIP';
import schema from './schema.json';
import schemaError from '../../../../../../../helper/schema/schema_error_default.json';
import rs from '../../../../../../helper/responseStatusLibrary.json';
import { selectByBuyerId } from '../../../../../data/model/v1/account/map_buyer_sellers';

const { cookies, buyerId } = getDataFromPool('sinbad-app', 'Chimera-SR_081231111111');

describe(`${tc.type[1]} ${tc.describe}`, () => {
  test.only(`${tc.positive.default}`, async () => {
    const payload = data.examplePayload();

    resp = await endpoint(cookies, payload);
    er.expectStatus(resp, rs.statusOk);
    er.expectSchema(resp, schema);

    const objectFiltered = resp.body.data[0];
    const arrDB = await selectByBuyerId(buyerId);
    const objectDB = (arrDB)[0];
    er.expectEqualDB(resp, objectFiltered, objectDB, data.compareDB);
  });
});

describe(`${tc.type[0]} ${tc.describe}`, () => {
  (data.negativeCase).forEach(async (element) => {
    test(`${element.desc}`, async () => {
      const payload = data.examplePayload();
      const param = Object.keys(element.request);
      payload[param] = element.request[param];

      resp = await endpoint(cookies, payload);
      er.expectStatus(resp, rs.statusBadRequest); // => need adjustment on status
      er.expectSchema(resp, schemaError);
      // er.expectSnapshot(resp); // => need adjustment due to skip and limit change to be optional
    });
  });

  test(`${tc.negative.xPlatformInvalid}`, async () => {
    const payload = data.examplePayload();

    resp = await endpoint(cookies, payload).set('x-platform', 'error');
    er.expectStatus(resp, rs.statusUnauthorized);
    er.expectUnauthorized(resp);
  });

  test(`${tc.negative.xPlatformNotSet}`, async () => {
    const payload = data.examplePayload();

    resp = await endpoint(cookies, payload).unset('x-platform');
    er.expectStatus(resp, rs.statusUnauthorized);
    er.expectUnauthorized(resp);
  });

  data.loopingErrorCookies.forEach(async (element) => {
    test(`${element.title}`, async () => {
      const payload = data.examplePayload();
      const cookiesNegative = element.value;

      resp = await endpoint(cookiesNegative, payload);
      er.expectStatus(resp, rs.statusUnauthorized);
      er.expectUnauthorized(resp);
    });
  });
});
